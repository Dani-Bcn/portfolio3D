/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useState } from "react";
import {
  useGLTF,
  useScroll,
  MeshReflectorMaterial,
  useCursor,
} from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import { gsap } from "gsap";
import { useNavigate } from "react-router-dom";

export function Card3d(props) {
  const navigate = useNavigate();
  const data = useScroll();
  const groupRef = useRef();
  const projectsRef = useRef();
  const contactRef = useRef();
  const aboutRef = useRef();
  const circleDownRef = useRef();
  const [hovered, setHovred] = useState(false);

  const { nodes, materials } = useGLTF("/card3d.glb");

  useCursor(hovered);

  const handleOver = (e) => {
    gsap.to(groupRef.current.rotation, {
      x: e.pointer.x * 2,
      y: e.pointer.y * 2,
      z: 0,
      ease: "power4.In",
    });

    gsap.to(circleDownRef.current.position, {
      z: 200,
      ease:"power4.out",
      duration:0.5
    });
    gsap.to(circleDownRef.current.rotation, {
      z: 200,
      duration:0.5
    });
    gsap.to(aboutRef.current.position, {
      z: e.pointer.y + 100,
      delay: 0.75,
      ease: "power4.out",
    });
    gsap.to(projectsRef.current.position, {
      z: e.pointer.y + 100,
      delay: 0.5,
      ease: "power4.out",
    });
    gsap.to(contactRef.current.position, {
      z: e.pointer.y + 100,
      delay: 0.25,
      ease: "power4.out",
    });
  };

  const handleOut = (e) => {
    gsap.to(circleDownRef.current.position, {
      z: 10,
      ease:"power4.out",
      duration:0.5
    });
    gsap.to(groupRef.current.rotation, {
      x: 0,
      y: 0,
      z: 0,
    });
    gsap.to(aboutRef.current.position, {
      z: 10,
      delay: 0.75,
      ease: "power4.out",
    });
    gsap.to(projectsRef.current.position, {
      z: 10,
      delay: 0.5,
      ease: "power4.out",
    });
    gsap.to(contactRef.current.position, {
      z: 10,
      delay: 0.25,
      ease: "power4.out",
    });
  };

  const handleClickContact = () => {
    navigate("/contact");
    gsap.to(contactRef.current.scale, {
      x: 1500,
      y: 1500,
      z: 100,
      duration: 1,
      ease: "power4.in",
    });
  };

  const handleClickProjects = () => {
    navigate("/projects");
    gsap.to(projectsRef.current.scale, {
      x: 1500,
      y: 1500,
      z: 100,
      duration: 1,
      ease: "power4.in",
    });
  };
  const handleClickAbout = () => {
    navigate("/about");
    gsap.to(aboutRef.current.scale, {
      x: 1500,
      y: 1500,
      z: 100,
      duration: 1,
      ease: "power4.in",
    });
  };

  return (
    <group
      onPointerOut={() => handleOut()}
      onPointerMove={(e) => handleOver(e)}
      ref={groupRef}
      scale={0.005}
      {...props}
      dispose={null}
    >
      <mesh
        onClick={() => handleClickContact()}
        ref={contactRef}
        castShadow
        receiveShadow
        geometry={nodes.Cylinder5.geometry}
        material={nodes.Cylinder5.material}
        position={[102.03, -134.618, 16.781]}
      >
        <meshStandardMaterial
          color={"green"}
          transparent="true"
          opacity={0.9}
          emissive={"yellow"}
        />
      </mesh>
      <mesh
        ref={projectsRef}
        onClick={() => handleClickProjects()}
        castShadow
        receiveShadow
        geometry={nodes.Cylinder4.geometry}
        material={nodes.Cylinder4.material}
        position={[1.293, -134.618, 16.781]}
      >
        <meshStandardMaterial
          color={"blue"}
          transparent="true"
          opacity={0.9}
          emissive={"blue"}
        />
      </mesh>
      <mesh
        ref={aboutRef}
        onClick={() => handleClickAbout()}
        castShadow
        receiveShadow
        geometry={nodes.Cylinder3.geometry}
        material={nodes.Cylinder3.material}
        position={[-96.956, -134.618, 16.781]}
      >
        <meshStandardMaterial
          color={"green"}
          transparent="true"
          opacity={0.9}
          emissive={"green"}
        />
      </mesh>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Extrude2.geometry}
        material={nodes.Extrude2.material}
        position={[96.973, 97.69, 33.197]}
      >
        <meshStandardMaterial
          color={"red"}
          transparent="true"
          opacity={0.9}
          emissive={"green"}
        />
      </mesh>
      <mesh
        ref={circleDownRef}
        castShadow
        receiveShadow
        geometry={nodes.Cylinder.geometry}
        material={nodes.Cylinder.material}
        position={[100.699, 99.633, 7.971]}
      >
        <meshStandardMaterial
          color={"red"}
          transparent="true"
          opacity={0.9}
          emissive={"green"}
        />
      </mesh>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cylinder1.geometry}
        material={nodes.Cylinder1.material}
        position={[100.699, 99.633, 16.442]}
      >
        <meshStandardMaterial
          color={"red"}
          transparent="true"
          opacity={0.9}
          emissive={"rgb(150,150,250)"}
        />
      </mesh>
      <mesh
        onClick={(e) => console.log(e)}
        castShadow
        receiveShadow
        geometry={nodes.Cylinder2.geometry}
        material={nodes.Cylinder2.material}
        position={[100.699, 99.633, 24.496]}
      >
        <meshStandardMaterial
          color={"red"}
          transparent="true"
          opacity={0.9}
          emissive={"rgb(150,150,20)"}
        />
      </mesh>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Extrude.geometry}
        material={nodes.Extrude.material}
      >
        <MeshReflectorMaterial
          blur={[500, 1000]}
          resolution={4048}
          mixBlur={1}
          mixStrength={8}
          roughness={1}
          depthScale={1.2}
          minDepthThreshold={0.1}
          maxDepthThreshold={1.8}
          color="green"
          metalness={0.8}
        />
      </mesh>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Extrude1.geometry}
        material={nodes.Extrude1.material}
        position={[0, 0, 5.764]}
      >
        <meshStandardMaterial
          color={"green"}
          transparent="true"
          opacity={0.9}
          emissive={"rgb(5,200,170)"}
        />
      </mesh>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Extrude3.geometry}
        material={nodes.Extrude3.material}
        position={[-96.577, 25.605, 16.759]}
      >
        <meshStandardMaterial
          color={"grey"}
          transparent="true"
          opacity={0.9}
          emissive={"rgb(10,50,200)"}
        />
      </mesh>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Extrude3_1.geometry}
        position={[46.444, -49.423, 16.759]}
      >
        <meshStandardMaterial
          color={"grey"}
          transparent="true"
          opacity={0.9}
          emissive={"rgb(10,50,200)"}
        />
      </mesh>
    </group>
  );
}

useGLTF.preload("/card3d.glb");
